/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SystemComponent } from "./SystemComponent";
import { SystemComponentCountArgs } from "./SystemComponentCountArgs";
import { SystemComponentFindManyArgs } from "./SystemComponentFindManyArgs";
import { SystemComponentFindUniqueArgs } from "./SystemComponentFindUniqueArgs";
import { CreateSystemComponentArgs } from "./CreateSystemComponentArgs";
import { UpdateSystemComponentArgs } from "./UpdateSystemComponentArgs";
import { DeleteSystemComponentArgs } from "./DeleteSystemComponentArgs";
import { SystemComponentService } from "../systemComponent.service";
@graphql.Resolver(() => SystemComponent)
export class SystemComponentResolverBase {
  constructor(protected readonly service: SystemComponentService) {}

  async _systemComponentsMeta(
    @graphql.Args() args: SystemComponentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SystemComponent])
  async systemComponents(
    @graphql.Args() args: SystemComponentFindManyArgs
  ): Promise<SystemComponent[]> {
    return this.service.systemComponents(args);
  }

  @graphql.Query(() => SystemComponent, { nullable: true })
  async systemComponent(
    @graphql.Args() args: SystemComponentFindUniqueArgs
  ): Promise<SystemComponent | null> {
    const result = await this.service.systemComponent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SystemComponent)
  async createSystemComponent(
    @graphql.Args() args: CreateSystemComponentArgs
  ): Promise<SystemComponent> {
    return await this.service.createSystemComponent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SystemComponent)
  async updateSystemComponent(
    @graphql.Args() args: UpdateSystemComponentArgs
  ): Promise<SystemComponent | null> {
    try {
      return await this.service.updateSystemComponent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SystemComponent)
  async deleteSystemComponent(
    @graphql.Args() args: DeleteSystemComponentArgs
  ): Promise<SystemComponent | null> {
    try {
      return await this.service.deleteSystemComponent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
