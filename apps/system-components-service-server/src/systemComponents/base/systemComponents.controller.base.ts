/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SystemComponentsService } from "../systemComponents.service";
import { SystemComponentsCreateInput } from "./SystemComponentsCreateInput";
import { SystemComponents } from "./SystemComponents";
import { SystemComponentsFindManyArgs } from "./SystemComponentsFindManyArgs";
import { SystemComponentsWhereUniqueInput } from "./SystemComponentsWhereUniqueInput";
import { SystemComponentsUpdateInput } from "./SystemComponentsUpdateInput";

export class SystemComponentsControllerBase {
  constructor(protected readonly service: SystemComponentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SystemComponents })
  async createSystemComponents(
    @common.Body() data: SystemComponentsCreateInput
  ): Promise<SystemComponents> {
    return await this.service.createSystemComponents({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        code: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SystemComponents] })
  @ApiNestedQuery(SystemComponentsFindManyArgs)
  async systemComponentsItems(
    @common.Req() request: Request
  ): Promise<SystemComponents[]> {
    const args = plainToClass(SystemComponentsFindManyArgs, request.query);
    return this.service.systemComponentsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        code: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SystemComponents })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async systemComponents(
    @common.Param() params: SystemComponentsWhereUniqueInput
  ): Promise<SystemComponents | null> {
    const result = await this.service.systemComponents({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        code: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SystemComponents })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSystemComponents(
    @common.Param() params: SystemComponentsWhereUniqueInput,
    @common.Body() data: SystemComponentsUpdateInput
  ): Promise<SystemComponents | null> {
    try {
      return await this.service.updateSystemComponents({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          code: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SystemComponents })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSystemComponents(
    @common.Param() params: SystemComponentsWhereUniqueInput
  ): Promise<SystemComponents | null> {
    try {
      return await this.service.deleteSystemComponents({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          code: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
