/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SystemComponent as PrismaSystemComponent,
} from "@prisma/client";

export class SystemComponentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SystemComponentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.systemComponent.count(args);
  }

  async systemComponents(
    args: Prisma.SystemComponentFindManyArgs
  ): Promise<PrismaSystemComponent[]> {
    return this.prisma.systemComponent.findMany(args);
  }
  async systemComponent(
    args: Prisma.SystemComponentFindUniqueArgs
  ): Promise<PrismaSystemComponent | null> {
    return this.prisma.systemComponent.findUnique(args);
  }
  async createSystemComponent(
    args: Prisma.SystemComponentCreateArgs
  ): Promise<PrismaSystemComponent> {
    return this.prisma.systemComponent.create(args);
  }
  async updateSystemComponent(
    args: Prisma.SystemComponentUpdateArgs
  ): Promise<PrismaSystemComponent> {
    return this.prisma.systemComponent.update(args);
  }
  async deleteSystemComponent(
    args: Prisma.SystemComponentDeleteArgs
  ): Promise<PrismaSystemComponent> {
    return this.prisma.systemComponent.delete(args);
  }
}
