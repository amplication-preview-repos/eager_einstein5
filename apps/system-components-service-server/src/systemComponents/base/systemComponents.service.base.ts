/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SystemComponents as PrismaSystemComponents,
} from "@prisma/client";

export class SystemComponentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SystemComponentsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.systemComponents.count(args);
  }

  async systemComponentsItems(
    args: Prisma.SystemComponentsFindManyArgs
  ): Promise<PrismaSystemComponents[]> {
    return this.prisma.systemComponents.findMany(args);
  }
  async systemComponents(
    args: Prisma.SystemComponentsFindUniqueArgs
  ): Promise<PrismaSystemComponents | null> {
    return this.prisma.systemComponents.findUnique(args);
  }
  async createSystemComponents(
    args: Prisma.SystemComponentsCreateArgs
  ): Promise<PrismaSystemComponents> {
    return this.prisma.systemComponents.create(args);
  }
  async updateSystemComponents(
    args: Prisma.SystemComponentsUpdateArgs
  ): Promise<PrismaSystemComponents> {
    return this.prisma.systemComponents.update(args);
  }
  async deleteSystemComponents(
    args: Prisma.SystemComponentsDeleteArgs
  ): Promise<PrismaSystemComponents> {
    return this.prisma.systemComponents.delete(args);
  }
}
