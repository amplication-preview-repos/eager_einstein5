/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SystemComponentService } from "../systemComponent.service";
import { SystemComponentCreateInput } from "./SystemComponentCreateInput";
import { SystemComponent } from "./SystemComponent";
import { SystemComponentFindManyArgs } from "./SystemComponentFindManyArgs";
import { SystemComponentWhereUniqueInput } from "./SystemComponentWhereUniqueInput";
import { SystemComponentUpdateInput } from "./SystemComponentUpdateInput";

export class SystemComponentControllerBase {
  constructor(protected readonly service: SystemComponentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SystemComponent })
  async createSystemComponent(
    @common.Body() data: SystemComponentCreateInput
  ): Promise<SystemComponent> {
    return await this.service.createSystemComponent({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        title: true,
        description: true,
        characteristic: true,
        code: true,
        version: true,
        platformServiceKindId: true,
        platformServiceKindType: true,
        properties: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SystemComponent] })
  @ApiNestedQuery(SystemComponentFindManyArgs)
  async systemComponents(
    @common.Req() request: Request
  ): Promise<SystemComponent[]> {
    const args = plainToClass(SystemComponentFindManyArgs, request.query);
    return this.service.systemComponents({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        title: true,
        description: true,
        characteristic: true,
        code: true,
        version: true,
        platformServiceKindId: true,
        platformServiceKindType: true,
        properties: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SystemComponent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async systemComponent(
    @common.Param() params: SystemComponentWhereUniqueInput
  ): Promise<SystemComponent | null> {
    const result = await this.service.systemComponent({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        title: true,
        description: true,
        characteristic: true,
        code: true,
        version: true,
        platformServiceKindId: true,
        platformServiceKindType: true,
        properties: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SystemComponent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSystemComponent(
    @common.Param() params: SystemComponentWhereUniqueInput,
    @common.Body() data: SystemComponentUpdateInput
  ): Promise<SystemComponent | null> {
    try {
      return await this.service.updateSystemComponent({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          typeField: true,
          title: true,
          description: true,
          characteristic: true,
          code: true,
          version: true,
          platformServiceKindId: true,
          platformServiceKindType: true,
          properties: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SystemComponent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSystemComponent(
    @common.Param() params: SystemComponentWhereUniqueInput
  ): Promise<SystemComponent | null> {
    try {
      return await this.service.deleteSystemComponent({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          typeField: true,
          title: true,
          description: true,
          characteristic: true,
          code: true,
          version: true,
          platformServiceKindId: true,
          platformServiceKindType: true,
          properties: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
